spring.application.name=USER-SERVICE
server.port=8081
spring.datasource.url=jdbc:mysql://localhost:3306/micro_service_user_service
spring.datasource.password=Shivji@1628


# Eureka COnfiguration and remaining Database configuration from config-server
spring.config.import=optional:configserver:http://localhost:8085
# spring.profiles.active=prod


#Actuator Configuration
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

#Resilience4j Configuration
#Hotel_Rating_Breaker is the name used in UserController

# Make this circuit breaker visible in /actuator/health. So you can check if it is ON, OFF, or broken.
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.registerHealthIndicator=true

# "Keep a memory of the last 10 important changes" — like when it failed, recovered, etc.
# Just like keeping a log of what happened.
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.event-consumer-buffer-size=10

# "If more than half (50%) of the calls are failing, then stop calling that service for a while."
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.failure-rate-threshold=50 

# "Don’t judge too early. Wait for at least 5 calls, then check if it's failing too much."
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.minimum-number-of-calls=5

# "After stopping calls for some time (breaker is open), automatically try again after a few seconds."
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.automatic-transition-from-open-to-half-open-enabled=true

# "Once stopped, wait for 6 seconds before trying again."
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.wait-duration-in-open-state=6s

# "When trying again, only allow 3 test calls."
        # If all 3 succeed → okay, open the gate (circuit closes).
        # If any fails → nope, close it again (stay broken).
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.permitted-number-of-calls-in-half-open-state=3

# "Look at the last 10 calls to decide if it’s working fine or failing."
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.sliding-window-size=10

# "Decide based on number of calls (not time)."
# Every 10 calls → check how many failed.
resilience4j.circuitbreaker.instances.Hotel_Rating_Breaker.sliding-window-type=COUNT_BASED



# Retry COnfiguration
resilience4j.retry.instances.Hotel_Rating_Retry.max-attempts=3
resilience4j.retry.instances.Hotel_Rating_Retry.wait-duration=5s


# Rate Limiter Configuration
resilience4j.ratelimiter.instances.User_Rate_Limiter.limit-refresh-period=4s
resilience4j.ratelimiter.instances.User_Rate_Limiter.limit-for-period=2
resilience4j.ratelimiter.instances.User_Rate_Limiter.timeout-duration=0s

